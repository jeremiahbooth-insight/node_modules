"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const load_hook_1 = require("../ext/load-hook");
const core_1 = require("@angular-devkit/core");
const path = require("path");
const webpack_merge_1 = require("webpack-merge");
function runBuilderHandler(options, transforms, context, builderHandler, configTransformerName = 'webpackConfiguration') {
    let plugin = null;
    if (options.plugin) {
        plugin = load_hook_1.loadHook(options.plugin);
    }
    setupConfigHook(transforms, options, context, plugin, configTransformerName);
    if (plugin && plugin.pre) {
        plugin.pre(options);
    }
    const result = asObservable(builderHandler(options, context, transforms));
    return result.pipe(operators_1.tap(_ => {
        if (plugin && plugin.post) {
            plugin.post(options);
        }
    }));
}
exports.runBuilderHandler = runBuilderHandler;
function asObservable(result) {
    if (rxjs_1.isObservable(result)) {
        return result;
    }
    if (result instanceof Promise) {
        return rxjs_1.from(result);
    }
    return rxjs_1.of(result);
}
function setupConfigHook(transforms, options, context, plugin, configTransformerName = 'webpackConfiguration') {
    const originalConfigFn = transforms[configTransformerName];
    transforms[configTransformerName] = (config) => {
        if (options.singleBundle) {
            if (!options.keepPolyfills && config.entry && config.entry['polyfills']) {
                delete config.entry['polyfills'];
            }
            if (!options.keepPolyfills && config.entry && config.entry['polyfills-es5']) {
                delete config.entry['polyfills-es5'];
            }
            if (config.optimization) {
                delete config.optimization.runtimeChunk;
                delete config.optimization.splitChunks;
            }
        }
        const keepStyles = !options.bundleStyles || options.keepStyles;
        if (options.singleBundle && !keepStyles && config.entry && config.entry['styles']) {
            delete config.entry['styles'];
        }
        if (options.extraWebpackConfig) {
            const filePath = path.resolve(core_1.getSystemPath(core_1.normalize(context.workspaceRoot)), options.extraWebpackConfig);
            const additionalConfig = require(filePath);
            config = webpack_merge_1.merge([config, additionalConfig]);
        }
        if (plugin && plugin.config) {
            config = plugin.config(config, options);
        }
        if (options.configHook) {
            const hook = load_hook_1.loadHook(options.configHook);
            config = hook(config);
        }
        if (originalConfigFn) {
            return originalConfigFn(config);
        }
        else {
            return config;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInNyYy91dGlscy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLCtCQUEwRDtBQUMxRCw4Q0FBcUM7QUFFckMsZ0RBQTRDO0FBQzVDLCtDQUFnRTtBQUVoRSw2QkFBNkI7QUFDN0IsaURBQXNEO0FBVXRELFNBQWdCLGlCQUFpQixDQUFDLE9BQVksRUFBRSxVQUFzQixFQUFFLE9BQXVCLEVBQUUsY0FBeUMsRUFBRSxxQkFBcUIsR0FBRyxzQkFBc0I7SUFFeEwsSUFBSSxNQUFNLEdBQWtCLElBQUksQ0FBQztJQUNqQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDbEIsTUFBTSxHQUFHLG9CQUFRLENBQVMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzNDO0lBRUQsZUFBZSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBRTdFLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNyQjtJQUVELE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDekIsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQyxDQUFRLENBQW9CLENBQUM7QUFFaEMsQ0FBQztBQXJCRCw4Q0FxQkM7QUFFRCxTQUFTLFlBQVksQ0FBQyxNQUF5QjtJQUM3QyxJQUFJLG1CQUFZLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDdEIsT0FBTyxNQUF5QixDQUFDO0tBQ3BDO0lBQ0QsSUFBSSxNQUFNLFlBQVksT0FBTyxFQUFFO1FBQzdCLE9BQU8sV0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsT0FBTyxTQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLFVBQXNCLEVBQUUsT0FBWSxFQUFFLE9BQXVCLEVBQUUsTUFBcUIsRUFBRSxxQkFBcUIsR0FBRyxzQkFBc0I7SUFFM0osTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUMzRCxVQUFVLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLE1BQTZCLEVBQUUsRUFBRTtRQUVwRSxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUN2RSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbEM7WUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUU7Z0JBQzNFLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUN0QztZQUNELElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtnQkFDdkIsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztnQkFDeEMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQzthQUN4QztTQUNGO1FBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFFL0QsSUFBSSxPQUFPLENBQUMsWUFBWSxJQUFJLENBQUUsVUFBVSxJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNsRixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDL0I7UUFFRCxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRTtZQUM5QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFhLENBQUMsZ0JBQVMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUMzRyxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQyxNQUFNLEdBQUcscUJBQVksQ0FBQyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQzNCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUNwQixNQUFNLElBQUksR0FBRyxvQkFBUSxDQUFlLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN4RCxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQixPQUFPLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2pDO2FBQ0k7WUFDSCxPQUFPLE1BQU0sQ0FBQztTQUNmO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4ZWN1dGlvblRyYW5zZm9ybWVyIH0gZnJvbSBcIkBhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyXCI7XG5pbXBvcnQgeyBCdWlsZGVyQ29udGV4dCwgQnVpbGRlck91dHB1dExpa2UgfSBmcm9tIFwiQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdFwiO1xuaW1wb3J0IHsgb2YsIGZyb20sIGlzT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb25maWdIb29rRm4gfSBmcm9tIFwiLi4vZXh0L2hvb2tcIjtcbmltcG9ydCB7IGxvYWRIb29rIH0gZnJvbSBcIi4uL2V4dC9sb2FkLWhvb2tcIjtcbmltcG9ydCB7IGdldFN5c3RlbVBhdGgsIG5vcm1hbGl6ZSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCAqIGFzIHdlYnBhY2sgZnJvbSAnd2VicGFjayc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgbWVyZ2UgYXMgd2VicGFja01lcmdlIH0gZnJvbSAnd2VicGFjay1tZXJnZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNmb3JtcyB7XG4gIHdlYnBhY2tDb25maWd1cmF0aW9uPzogRXhlY3V0aW9uVHJhbnNmb3JtZXI8d2VicGFjay5Db25maWd1cmF0aW9uPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCdWlsZGVySGFuZGxlclBsdXNGbjxBPiB7XG4gIChpbnB1dDogQSwgY29udGV4dDogQnVpbGRlckNvbnRleHQsIHRyYW5zZm9ybXM6IFRyYW5zZm9ybXMpOiBCdWlsZGVyT3V0cHV0TGlrZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bkJ1aWxkZXJIYW5kbGVyKG9wdGlvbnM6IGFueSwgdHJhbnNmb3JtczogVHJhbnNmb3JtcywgY29udGV4dDogQnVpbGRlckNvbnRleHQsIGJ1aWxkZXJIYW5kbGVyOiBCdWlsZGVySGFuZGxlclBsdXNGbjxhbnk+LCBjb25maWdUcmFuc2Zvcm1lck5hbWUgPSAnd2VicGFja0NvbmZpZ3VyYXRpb24nKSB7XG4gIFxuICBsZXQgcGx1Z2luOiBQbHVnaW4gfCBudWxsID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMucGx1Z2luKSB7XG4gICAgcGx1Z2luID0gbG9hZEhvb2s8UGx1Z2luPihvcHRpb25zLnBsdWdpbik7XG4gIH1cblxuICBzZXR1cENvbmZpZ0hvb2sodHJhbnNmb3Jtcywgb3B0aW9ucywgY29udGV4dCwgcGx1Z2luLCBjb25maWdUcmFuc2Zvcm1lck5hbWUpO1xuXG4gIGlmIChwbHVnaW4gJiYgcGx1Z2luLnByZSkge1xuICAgIHBsdWdpbi5wcmUob3B0aW9ucyk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBhc09ic2VydmFibGUoYnVpbGRlckhhbmRsZXIob3B0aW9ucywgY29udGV4dCwgdHJhbnNmb3JtcykpO1x0XG5cbiAgcmV0dXJuIHJlc3VsdC5waXBlKHRhcChfID0+IHtcdFxuICAgIGlmIChwbHVnaW4gJiYgcGx1Z2luLnBvc3QpIHtcdFxuICAgICAgcGx1Z2luLnBvc3Qob3B0aW9ucyk7XHRcbiAgICB9XHRcbiAgfSkgYXMgYW55KSBhcyBPYnNlcnZhYmxlPGFueT47XG5cbn1cblxuZnVuY3Rpb24gYXNPYnNlcnZhYmxlKHJlc3VsdDogQnVpbGRlck91dHB1dExpa2UpIHtcbiAgaWYgKGlzT2JzZXJ2YWJsZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0IGFzIE9ic2VydmFibGU8YW55PjtcbiAgfVxuICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgIHJldHVybiBmcm9tKHJlc3VsdCk7XG4gIH1cbiAgcmV0dXJuIG9mKHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIHNldHVwQ29uZmlnSG9vayh0cmFuc2Zvcm1zOiBUcmFuc2Zvcm1zLCBvcHRpb25zOiBhbnksIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0LCBwbHVnaW46IFBsdWdpbiB8IG51bGwsIGNvbmZpZ1RyYW5zZm9ybWVyTmFtZSA9ICd3ZWJwYWNrQ29uZmlndXJhdGlvbicpIHtcbiAgXG4gIGNvbnN0IG9yaWdpbmFsQ29uZmlnRm4gPSB0cmFuc2Zvcm1zW2NvbmZpZ1RyYW5zZm9ybWVyTmFtZV07XG4gIHRyYW5zZm9ybXNbY29uZmlnVHJhbnNmb3JtZXJOYW1lXSA9IChjb25maWc6IHdlYnBhY2suQ29uZmlndXJhdGlvbikgPT4ge1xuXG4gICAgaWYgKG9wdGlvbnMuc2luZ2xlQnVuZGxlKSB7XG4gICAgICBpZiAoIW9wdGlvbnMua2VlcFBvbHlmaWxscyAmJiBjb25maWcuZW50cnkgJiYgY29uZmlnLmVudHJ5Wydwb2x5ZmlsbHMnXSkge1xuICAgICAgICBkZWxldGUgY29uZmlnLmVudHJ5Wydwb2x5ZmlsbHMnXTtcbiAgICAgIH1cbiAgICAgIGlmICghb3B0aW9ucy5rZWVwUG9seWZpbGxzICYmIGNvbmZpZy5lbnRyeSAmJiBjb25maWcuZW50cnlbJ3BvbHlmaWxscy1lczUnXSkge1xuICAgICAgICBkZWxldGUgY29uZmlnLmVudHJ5Wydwb2x5ZmlsbHMtZXM1J107XG4gICAgICB9ICAgICAgXG4gICAgICBpZiAoY29uZmlnLm9wdGltaXphdGlvbikge1xuICAgICAgICBkZWxldGUgY29uZmlnLm9wdGltaXphdGlvbi5ydW50aW1lQ2h1bms7XG4gICAgICAgIGRlbGV0ZSBjb25maWcub3B0aW1pemF0aW9uLnNwbGl0Q2h1bmtzO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGtlZXBTdHlsZXMgPSAhb3B0aW9ucy5idW5kbGVTdHlsZXMgfHwgb3B0aW9ucy5rZWVwU3R5bGVzO1xuXG4gICAgaWYgKG9wdGlvbnMuc2luZ2xlQnVuZGxlICYmICEga2VlcFN0eWxlcyAmJiBjb25maWcuZW50cnkgJiYgY29uZmlnLmVudHJ5WydzdHlsZXMnXSkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5lbnRyeVsnc3R5bGVzJ107XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZXh0cmFXZWJwYWNrQ29uZmlnKSB7XG4gICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShnZXRTeXN0ZW1QYXRoKG5vcm1hbGl6ZShjb250ZXh0LndvcmtzcGFjZVJvb3QpKSwgb3B0aW9ucy5leHRyYVdlYnBhY2tDb25maWcpO1xuICAgICAgY29uc3QgYWRkaXRpb25hbENvbmZpZyA9IHJlcXVpcmUoZmlsZVBhdGgpO1xuICAgICAgY29uZmlnID0gd2VicGFja01lcmdlKFtjb25maWcsIGFkZGl0aW9uYWxDb25maWddKTtcbiAgICB9XG4gICAgaWYgKHBsdWdpbiAmJiBwbHVnaW4uY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBwbHVnaW4uY29uZmlnKGNvbmZpZywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY29uZmlnSG9vaykge1xuICAgICAgICBjb25zdCBob29rID0gbG9hZEhvb2s8Q29uZmlnSG9va0ZuPihvcHRpb25zLmNvbmZpZ0hvb2spO1xuICAgICAgICBjb25maWcgPSBob29rKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgaWYgKG9yaWdpbmFsQ29uZmlnRm4pIHtcbiAgICAgIHJldHVybiBvcmlnaW5hbENvbmZpZ0ZuKGNvbmZpZyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG4gIH07XG59XG4iXX0=