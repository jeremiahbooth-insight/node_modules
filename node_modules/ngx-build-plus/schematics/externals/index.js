"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("../utils/workspace");
const path = require("path");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const SCRIPTS = [
    "node_modules/rxjs/bundles/rxjs.umd.js",
    "node_modules/@angular/core/bundles/core.umd.js",
    "node_modules/@angular/common/bundles/common.umd.js",
    "node_modules/@angular/common/bundles/common-http.umd.js",
    "node_modules/@angular/compiler/bundles/compiler.umd.js",
    "node_modules/@angular/elements/bundles/elements.umd.js",
    "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js",
    "node_modules/@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js"
];
function addExternalsSupport(_options) {
    return (tree, _context) => {
        const project = getProject(tree, _options);
        const relProjectRootPath = project.root.replace(/[^\/]+/g, '..') || '';
        updatePackageJson(project.root || '', tree, _options, _context);
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign(Object.assign({}, _options), { relProjectRootPath, projectRoot: project.root || '' })),
            schematics_1.move(project.root || '/')
        ]);
        return schematics_1.chain([
            addScriptsToProject(tree, _options),
            schematics_1.mergeWith(templateSource),
        ]);
    };
}
exports.addExternalsSupport = addExternalsSupport;
function updatePackageJson(path, tree, _options, _context) {
    const config = loadPackageJson(tree);
    updateScripts(path, config, tree, _options, _context);
    savePackageJson(config, tree);
}
function addScriptsToProject(tree, options) {
    const workspace = workspace_1.getWorkspace(tree);
    if (!options.project) {
        options.project = Object.keys(workspace.projects)[0];
    }
    const project = workspace.projects[options.project];
    if (!project.architect || !project.architect.build || !project.architect.build.options) {
        return schematics_1.noop();
    }
    const buildOptions = project.architect.build.options;
    if (!buildOptions)
        return schematics_1.noop();
    if (!buildOptions.scripts) {
        buildOptions.scripts = [];
    }
    const scripts = buildOptions.scripts;
    SCRIPTS
        .filter(s => !scripts.includes(s))
        .forEach(script => {
        scripts.push(script);
    });
    workspace_1.updateWorkspace(tree, workspace);
    return schematics_1.noop();
}
function getProject(tree, options) {
    const workspace = workspace_1.getWorkspace(tree);
    if (!options.project) {
        options.project = Object.keys(workspace.projects)[0];
    }
    const project = workspace.projects[options.project];
    // compensate for lacking sourceRoot property
    // e. g. when project was migrated to ng7, sourceRoot is lacking
    if (!project.sourceRoot && !project.root) {
        project.sourceRoot = 'src';
    }
    else if (!project.sourceRoot) {
        project.sourceRoot = path.join(project.root, 'src');
    }
    return project;
}
function savePackageJson(config, tree) {
    const newContentAsString = JSON.stringify(config, null, 2) || '';
    tree.overwrite('package.json', newContentAsString);
}
function loadPackageJson(tree) {
    const pkg = tree.read('package.json');
    if (pkg === null)
        throw Error('could not read package.json');
    const contentAsString = pkg.toString('UTF-8');
    const config = JSON.parse(contentAsString);
    return config;
}
function updateScripts(path, config, tree, _options, _context) {
    const project = getProject(tree, _options);
    if (path)
        path += '/';
    if (!config['scripts']) {
        config.scripts = {};
    }
    let additionalFlags = '';
    // Ivy support
    const postInstall = config.scripts['postinstall'] || '';
    //if (postInstall.startsWith('ngcc')) {
    config.scripts['postinstall:bak'] = postInstall;
    config.scripts['postinstall'] = 'ngcc';
    _context.addTask(new tasks_1.RunSchematicTask('npmRun', { script: 'postinstall' }));
    //} 
    if (!_options.host) {
        // external web components need single bundle 
        additionalFlags = '--single-bundle';
    }
    // Heuristic for default project
    if (!project.root) {
        config.scripts['build:externals'] = `ng build --extra-webpack-config ${path}/webpack.externals.js --prod ${additionalFlags}`;
    }
    if (_options.project) {
        config.scripts[`build:${_options.project}:externals`] = `ng build --extra-webpack-config ${path}/webpack.externals.js --prod --project ${_options.project} ${additionalFlags}`;
    }
}
//# sourceMappingURL=data:application/json;base64,