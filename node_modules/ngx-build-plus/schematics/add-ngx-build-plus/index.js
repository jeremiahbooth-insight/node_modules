"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const workspace_1 = require("../utils/workspace");
function addNgxBuildPlus(_options) {
    return (tree, _context) => {
        const project = _options.project;
        const workspace = workspace_1.getWorkspace(tree);
        const architect = workspace.projects[project].architect;
        if (!architect)
            throw new Error(`expected node projects/${project}/architect in angular.json`);
        const build = architect.build;
        if (!build)
            throw new Error(`expected node projects/${project}/architect/build in angular.json`);
        // Custom Builders are not part of the CLI's enum
        build.builder = 'ngx-build-plus:browser';
        const serve = architect.serve;
        if (!serve)
            throw new Error(`expected node projects/${project}/architect/serve in angular.json`);
        serve.builder = 'ngx-build-plus:dev-server';
        const extractI18n = architect['extract-i18n'];
        if (extractI18n) {
            extractI18n.builder = 'ngx-build-plus:extract-i18n';
        }
        // We decided to not add our server builder by default, 
        // b/c the new jsdom-based Universal API only compiles
        // the server code (that is using the browser bundles) 
        // with this builder.
        //
        // const server = architect.server;
        // if (server) {
        //   server.builder = <any>'ngx-build-plus:server';
        // }
        const test = architect.test;
        if (test)
            test.builder = 'ngx-build-plus:karma';
        return workspace_1.updateWorkspace(tree, workspace);
    };
}
exports.addNgxBuildPlus = addNgxBuildPlus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInNjaGVtYXRpY3MvYWRkLW5neC1idWlsZC1wbHVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esa0RBQW1FO0FBRW5FLFNBQWdCLGVBQWUsQ0FBQyxRQUFhO0lBQzNDLE9BQU8sQ0FBQyxJQUFVLEVBQUUsUUFBMEIsRUFBRSxFQUFFO1FBRWhELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDakMsTUFBTSxTQUFTLEdBQUcsd0JBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVyQyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUN4RCxJQUFJLENBQUMsU0FBUztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLE9BQU8sNEJBQTRCLENBQUMsQ0FBQztRQUUvRixNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxLQUFLO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsT0FBTyxrQ0FBa0MsQ0FBQyxDQUFDO1FBRWpHLGlEQUFpRDtRQUNqRCxLQUFLLENBQUMsT0FBTyxHQUFRLHdCQUF3QixDQUFDO1FBRTlDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUs7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixPQUFPLGtDQUFrQyxDQUFDLENBQUM7UUFFakcsS0FBSyxDQUFDLE9BQU8sR0FBUSwyQkFBMkIsQ0FBQztRQUVqRCxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUMsSUFBSSxXQUFXLEVBQUU7WUFDZixXQUFXLENBQUMsT0FBTyxHQUFRLDZCQUE2QixDQUFDO1NBQzFEO1FBRUQsd0RBQXdEO1FBQ3hELHNEQUFzRDtRQUN0RCx1REFBdUQ7UUFDdkQscUJBQXFCO1FBQ3JCLEVBQUU7UUFDRixtQ0FBbUM7UUFDbkMsZ0JBQWdCO1FBQ2hCLG1EQUFtRDtRQUNuRCxJQUFJO1FBRUosTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUM1QixJQUFJLElBQUk7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFRLHNCQUFzQixDQUFDO1FBRXJELE9BQU8sMkJBQWUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQXhDRCwwQ0F3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSdWxlLCBTY2hlbWF0aWNDb250ZXh0LCBUcmVlIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L3NjaGVtYXRpY3MnO1xuaW1wb3J0IHsgZ2V0V29ya3NwYWNlLCB1cGRhdGVXb3Jrc3BhY2UgfSBmcm9tICcuLi91dGlscy93b3Jrc3BhY2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkTmd4QnVpbGRQbHVzKF9vcHRpb25zOiBhbnkpOiBSdWxlIHtcbiAgcmV0dXJuICh0cmVlOiBUcmVlLCBfY29udGV4dDogU2NoZW1hdGljQ29udGV4dCkgPT4ge1xuICAgIFxuICAgIGNvbnN0IHByb2plY3QgPSBfb3B0aW9ucy5wcm9qZWN0O1xuICAgIGNvbnN0IHdvcmtzcGFjZSA9IGdldFdvcmtzcGFjZSh0cmVlKTtcblxuICAgIGNvbnN0IGFyY2hpdGVjdCA9IHdvcmtzcGFjZS5wcm9qZWN0c1twcm9qZWN0XS5hcmNoaXRlY3Q7XG4gICAgaWYgKCFhcmNoaXRlY3QpIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgbm9kZSBwcm9qZWN0cy8ke3Byb2plY3R9L2FyY2hpdGVjdCBpbiBhbmd1bGFyLmpzb25gKTtcblxuICAgIGNvbnN0IGJ1aWxkID0gYXJjaGl0ZWN0LmJ1aWxkO1xuICAgIGlmICghYnVpbGQpIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgbm9kZSBwcm9qZWN0cy8ke3Byb2plY3R9L2FyY2hpdGVjdC9idWlsZCBpbiBhbmd1bGFyLmpzb25gKTtcblxuICAgIC8vIEN1c3RvbSBCdWlsZGVycyBhcmUgbm90IHBhcnQgb2YgdGhlIENMSSdzIGVudW1cbiAgICBidWlsZC5idWlsZGVyID0gPGFueT4nbmd4LWJ1aWxkLXBsdXM6YnJvd3Nlcic7XG5cbiAgICBjb25zdCBzZXJ2ZSA9IGFyY2hpdGVjdC5zZXJ2ZTtcbiAgICBpZiAoIXNlcnZlKSB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkIG5vZGUgcHJvamVjdHMvJHtwcm9qZWN0fS9hcmNoaXRlY3Qvc2VydmUgaW4gYW5ndWxhci5qc29uYCk7XG5cbiAgICBzZXJ2ZS5idWlsZGVyID0gPGFueT4nbmd4LWJ1aWxkLXBsdXM6ZGV2LXNlcnZlcic7XG5cbiAgICBjb25zdCBleHRyYWN0STE4biA9IGFyY2hpdGVjdFsnZXh0cmFjdC1pMThuJ107XG4gICAgaWYgKGV4dHJhY3RJMThuKSB7XG4gICAgICBleHRyYWN0STE4bi5idWlsZGVyID0gPGFueT4nbmd4LWJ1aWxkLXBsdXM6ZXh0cmFjdC1pMThuJztcbiAgICB9XG5cbiAgICAvLyBXZSBkZWNpZGVkIHRvIG5vdCBhZGQgb3VyIHNlcnZlciBidWlsZGVyIGJ5IGRlZmF1bHQsIFxuICAgIC8vIGIvYyB0aGUgbmV3IGpzZG9tLWJhc2VkIFVuaXZlcnNhbCBBUEkgb25seSBjb21waWxlc1xuICAgIC8vIHRoZSBzZXJ2ZXIgY29kZSAodGhhdCBpcyB1c2luZyB0aGUgYnJvd3NlciBidW5kbGVzKSBcbiAgICAvLyB3aXRoIHRoaXMgYnVpbGRlci5cbiAgICAvL1xuICAgIC8vIGNvbnN0IHNlcnZlciA9IGFyY2hpdGVjdC5zZXJ2ZXI7XG4gICAgLy8gaWYgKHNlcnZlcikge1xuICAgIC8vICAgc2VydmVyLmJ1aWxkZXIgPSA8YW55PiduZ3gtYnVpbGQtcGx1czpzZXJ2ZXInO1xuICAgIC8vIH1cblxuICAgIGNvbnN0IHRlc3QgPSBhcmNoaXRlY3QudGVzdDtcbiAgICBpZiAodGVzdCkgdGVzdC5idWlsZGVyID0gPGFueT4nbmd4LWJ1aWxkLXBsdXM6a2FybWEnO1xuXG4gICAgcmV0dXJuIHVwZGF0ZVdvcmtzcGFjZSh0cmVlLCB3b3Jrc3BhY2UpO1xuICB9O1xufVxuXG4gIFxuIl19